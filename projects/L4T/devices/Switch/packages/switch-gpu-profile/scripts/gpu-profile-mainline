#!/usr/bin/python

import sys

'''
This is a script to manage the Switch GPU clock profiles. When shutting down, the current profile is lost -
therefore, this script must be called at each reboot to restore the default profile.

Written by natinusala for Lakka. See print_usage() for usage.

For now the profile is not retained and is set to default non-docked speed when rebooting.
'''

# File corresponding to the current profile
PROFILE_FILE = "/sys/kernel/debug/dri/128/pstate"

# Profiles list
PROFILES = {
    "docked-overclock-3":       "0d",       # 998 Mhz
    "docked-overclock-2":       "0c",       # 921 Mhz
    "docked-overclock-1":       "0b",       # 844 Mhz
    "docked":                   "0a",       # 768 Mhz
    "non-docked-overclock-5":   "09",       # 691 Mhz
    "non-docked-overclock-4":   "08",       # 614 Mhz
    "non-docked-overclock-3":   "07",       # 537 Mhz
    "non-docked-overclock-2":   "06",       # 460 Mhz
    "non-docked-overclock-1":   "05",       # 384 Mhz
    "non-docked":               "04",       # 307 Mhz
    "non-docked-underclock-1":  "03",       # 230 Mhz
    "non-docked-underclock-2":  "02",       # 153 Mhz
    "non-docked-underclock-3":  "01",       # 76 Mhz
}

# Default profile
DEFAULT_PROFILE = "non-docked"


def get_profile():
    with open(PROFILE_FILE, "r") as f:
        pstate = str(f.read().strip())

    for line in pstate.splitlines():
        if line[-1] == "*":
            profile_code = line[0:2]

            for profile in PROFILES:
                if profile_code == PROFILES[profile]:
                    return profile

            raise Exception("Unknown profile code %s" % profile_code)



def apply_profile(profile):
    if profile not in PROFILES:
        raise Exception("Unknown profile %s" % profile)

    with open(PROFILE_FILE, "w") as f:
        f.write(PROFILES[profile])
        f.flush()
    print("Applied profile %s" % profile)


def print_usage():
    print '''
    Usage :
        gpu-profile init
            Sets the default profile - should be called on boot
            
        gpu-profile list
            Lists all the available profiles and their corresponding frequency
                
        gpu-profile set <profile>
            Sets the current profile to <profile>
    
        gpu-profile get
            Gets the current profile name
    '''

def print_profiles():
    print "Format : <name> - <code>: <freq> [flags] [* : enabled] [d : reboot default]"

    max_profile_name_length = max([len(x) for x in PROFILES.keys()])

    with open(PROFILE_FILE, "r") as f:
        pstate = str(f.read().strip())

    for line in pstate.splitlines():
        profile_code = line[0:2]
        is_default = False
        profile_name = ""

        for profile in PROFILES:
            if profile_code == PROFILES[profile]:
                profile_name = profile
                if  profile == DEFAULT_PROFILE:
                    is_default = True
                break;

        if profile_name != "":
            padding = " " * (max_profile_name_length - len(profile_name))
            print "%s%s - %s %s" % (profile_name, padding, line, "d" if is_default else "")

# Main
if __name__ == "__main__":
    argc = len(sys.argv)
    if argc == 2:
        if sys.argv[1] == "init":
            apply_profile(DEFAULT_PROFILE)
        elif sys.argv[1] == "get":
            print get_profile()
        elif sys.argv[1] == "list":
            print_profiles()
        else:
            print_usage()
    elif argc == 3:
        if sys.argv[1] == "set":
            apply_profile(sys.argv[2])
        else:
            print_usage()
    else:
        print_usage()
